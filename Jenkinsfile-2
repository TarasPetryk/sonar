pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  stages {
  
    stage("Branch Check"({
      when {
             expression { return params.branch_name == "main" && params.merged == true }
           }
      steps {
             build 'Branch Check'
              }
    }
  
    stage('Scan') {
      steps {
        withSonarQubeEnv(installationName: 'sq1') { 
          sh './mvnw clean org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar'
        }
      }
    }
    
    stage("Quality Gate") {
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    
    stage("GIT clone"){
      steps{
        git branch: 'main', credentialsId: 'git-key', url: 'ggit@github.com:TarasPetryk/sonar.git'  
        sh 'ls -la'
      }
    }
    
    
  }
}
